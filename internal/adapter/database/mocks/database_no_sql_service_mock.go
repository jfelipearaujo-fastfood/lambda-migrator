// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockDatabaseNoSQLService is an autogenerated mock type for the DatabaseNoSQLService type
type MockDatabaseNoSQLService struct {
	mock.Mock
}

// GetDbName provides a mock function with given fields:
func (_m *MockDatabaseNoSQLService) GetDbName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDbName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetInstance provides a mock function with given fields:
func (_m *MockDatabaseNoSQLService) GetInstance() *mongo.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInstance")
	}

	var r0 *mongo.Client
	if rf, ok := ret.Get(0).(func() *mongo.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Client)
		}
	}

	return r0
}

// Ping provides a mock function with given fields: ctx
func (_m *MockDatabaseNoSQLService) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockDatabaseNoSQLService creates a new instance of MockDatabaseNoSQLService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabaseNoSQLService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabaseNoSQLService {
	mock := &MockDatabaseNoSQLService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
